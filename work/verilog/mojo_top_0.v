/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_store_a_d, M_store_a_q = 1'h0;
  reg [15:0] M_store_b_d, M_store_b_q = 1'h0;
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  reg [28:0] M_counter_d, M_counter_q = 1'h0;
  localparam START_state = 5'd0;
  localparam CASEADD_state = 5'd1;
  localparam CASESUBTRACT1_state = 5'd2;
  localparam CASESUBTRACT2_state = 5'd3;
  localparam CASEOVERFLOW1_state = 5'd4;
  localparam CASEOVERFLOW2_state = 5'd5;
  localparam CASEAND_state = 5'd6;
  localparam CASEOR_state = 5'd7;
  localparam CASEXOR_state = 5'd8;
  localparam CASEA_state = 5'd9;
  localparam CASESHL_state = 5'd10;
  localparam CASESHR_state = 5'd11;
  localparam CASESRA_state = 5'd12;
  localparam CASECMPEQT_state = 5'd13;
  localparam CASECMPEQF_state = 5'd14;
  localparam CASECMPLTT_state = 5'd15;
  localparam CASECMPLTF_state = 5'd16;
  localparam CASECMPLET1_state = 5'd17;
  localparam CASECMPLEF_state = 5'd18;
  localparam CASECMPLET2_state = 5'd19;
  localparam CASEMUL1_state = 5'd20;
  localparam MANUAL_state = 5'd21;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  wire [16-1:0] M_alumod_alu;
  wire [1-1:0] M_alumod_z;
  wire [1-1:0] M_alumod_v;
  wire [1-1:0] M_alumod_n;
  reg [6-1:0] M_alumod_alufn;
  reg [16-1:0] M_alumod_a;
  reg [16-1:0] M_alumod_b;
  alu_3 alumod (
    .alufn(M_alumod_alufn),
    .a(M_alumod_a),
    .b(M_alumod_b),
    .alu(M_alumod_alu),
    .z(M_alumod_z),
    .v(M_alumod_v),
    .n(M_alumod_n)
  );
  
  localparam TIMER = 5'h1c;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    M_store_alufn_d = M_store_alufn_q;
    M_store_b_d = M_store_b_q;
    M_store_a_d = M_store_a_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 20'h00000;
    io_sel = 4'hf;
    a = 8'h00;
    b = 8'h00;
    alufn = io_dip[16+0+5-:6];
    M_alumod_alufn = alufn;
    M_alumod_a = a;
    M_alumod_b = b;
    alu = M_alumod_alu;
    io_led[0+7-:8] = a[0+7-:8];
    io_led[8+7-:8] = a[8+7-:8];
    
    case (M_state_q)
      START_state: begin
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = CASEADD_state;
        end
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
      MANUAL_state: begin
        if (io_dip[0+1+0-:1]) begin
          a[0+7-:8] = io_dip[8+7-:8];
          a[8+7-:8] = io_dip[16+7-:8];
          if (io_button[1+0-:1]) begin
            M_store_a_d = a;
          end
        end else begin
          b[0+7-:8] = io_dip[8+7-:8];
          b[8+7-:8] = io_dip[16+7-:8];
          if (io_button[1+0-:1]) begin
            M_store_b_d = b;
          end
        end
        alufn = io_dip[0+2+5-:6];
        if (io_button[3+0-:1]) begin
          M_store_alufn_d = alufn;
        end
        if (io_button[4+0-:1]) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
        end
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        M_alumod_alufn = M_store_alufn_q;
        alu = M_alumod_alu;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+0+0-:1] = 1'h1;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (io_button[2+0-:1]) begin
          M_state_d = START_state;
        end
      end
      CASEADD_state: begin
        M_alumod_alufn = 6'h00;
        M_alumod_a = 16'h55aa;
        M_alumod_b = 16'h2044;
        alu = M_alumod_alu;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h75ee) begin
          M_seg_values[15+4-:5] = 5'h0a;
          M_seg_values[10+4-:5] = 5'h0d;
          M_seg_values[5+4-:5] = 5'h0d;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          M_seg_values[15+4-:5] = 5'h0e;
          M_seg_values[10+4-:5] = 5'h02;
          M_seg_values[5+4-:5] = 5'h02;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASESUBTRACT1_state;
        end
      end
      CASESUBTRACT1_state: begin
        M_alumod_alufn = 6'h01;
        M_alumod_a = 16'h0011;
        M_alumod_b = 16'h0008;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h03;
        M_seg_values[5+4-:5] = 5'h0b;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASESUBTRACT2_state;
        end
      end
      CASESUBTRACT2_state: begin
        M_alumod_alufn = 6'h01;
        M_alumod_a = 16'hfffb;
        M_alumod_b = 16'h0008;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h03;
        M_seg_values[5+4-:5] = 5'h0b;
        M_seg_values[0+4-:5] = 5'h16;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEOVERFLOW1_state;
        end
      end
      CASEOVERFLOW1_state: begin
        M_alumod_alufn = 6'h00;
        M_alumod_a = 16'h4000;
        M_alumod_b = 16'h4000;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h00;
        M_seg_values[10+4-:5] = 5'h0f;
        M_seg_values[5+4-:5] = 5'h04;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEOVERFLOW2_state;
        end
      end
      CASEOVERFLOW2_state: begin
        M_alumod_alufn = 6'h01;
        M_alumod_a = 16'h6000;
        M_alumod_b = 16'hc000;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h00;
        M_seg_values[10+4-:5] = 5'h0f;
        M_seg_values[5+4-:5] = 5'h04;
        M_seg_values[0+4-:5] = 5'h16;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEAND_state;
        end
      end
      CASEAND_state: begin
        M_alumod_alufn = 6'h18;
        M_alumod_a = 16'h6857;
        M_alumod_b = 16'hac08;
        alu = M_alumod_alu;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h2800) begin
          M_seg_values[15+4-:5] = 5'h0a;
          M_seg_values[10+4-:5] = 5'h10;
          M_seg_values[5+4-:5] = 5'h0d;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          M_seg_values[15+4-:5] = 5'h0e;
          M_seg_values[10+4-:5] = 5'h02;
          M_seg_values[5+4-:5] = 5'h02;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEOR_state;
        end
      end
      CASEOR_state: begin
        M_alumod_alufn = 6'h1e;
        M_alumod_a = 16'h6857;
        M_alumod_b = 16'hac08;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h00;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h08;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEXOR_state;
        end
      end
      CASEXOR_state: begin
        M_alumod_alufn = 6'h16;
        M_alumod_a = 16'h6857;
        M_alumod_b = 16'hac08;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h11;
        M_seg_values[10+4-:5] = 5'h00;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEA_state;
        end
      end
      CASEA_state: begin
        M_alumod_alufn = 6'h1a;
        M_alumod_a = 16'h6857;
        M_alumod_b = 16'hac08;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0a;
        M_seg_values[10+4-:5] = 5'h08;
        M_seg_values[5+4-:5] = 5'h08;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASESHL_state;
        end
      end
      CASESHL_state: begin
        M_alumod_alufn = 6'h20;
        M_alumod_a = 16'h486c;
        M_alumod_b = 16'h0004;
        alu = M_alumod_alu;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h86c0) begin
          M_seg_values[15+4-:5] = 5'h05;
          M_seg_values[10+4-:5] = 5'h11;
          M_seg_values[5+4-:5] = 5'h04;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          M_seg_values[15+4-:5] = 5'h0e;
          M_seg_values[10+4-:5] = 5'h02;
          M_seg_values[5+4-:5] = 5'h02;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASESHR_state;
        end
      end
      CASESHR_state: begin
        M_alumod_alufn = 6'h21;
        M_alumod_a = 16'h6cf0;
        M_alumod_b = 16'h0006;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h11;
        M_seg_values[5+4-:5] = 5'h02;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASESRA_state;
        end
      end
      CASESRA_state: begin
        M_alumod_alufn = 6'h23;
        M_alumod_a = 16'hc861;
        M_alumod_b = 16'h000c;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h05;
        M_seg_values[10+4-:5] = 5'h02;
        M_seg_values[5+4-:5] = 5'h0a;
        M_seg_values[0+4-:5] = 5'h08;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPEQT_state;
        end
      end
      CASECMPEQT_state: begin
        M_alumod_alufn = 6'h33;
        M_alumod_a = 16'h0005;
        M_alumod_b = 16'h0005;
        alu = M_alumod_alu;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0001) begin
          M_seg_values[15+4-:5] = 5'h0c;
          M_seg_values[10+4-:5] = 5'h06;
          M_seg_values[5+4-:5] = 5'h0e;
          M_seg_values[0+4-:5] = 5'h01;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end else begin
          M_seg_values[15+4-:5] = 5'h0e;
          M_seg_values[10+4-:5] = 5'h02;
          M_seg_values[5+4-:5] = 5'h02;
          M_seg_values[0+4-:5] = 5'h08;
          io_seg = ~M_seg_seg;
          io_sel = ~M_seg_sel;
        end
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPEQF_state;
        end
      end
      CASECMPEQF_state: begin
        M_alumod_alufn = 6'h33;
        M_alumod_a = 16'h0005;
        M_alumod_b = 16'h0004;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h06;
        M_seg_values[5+4-:5] = 5'h0e;
        M_seg_values[0+4-:5] = 5'h16;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPLTT_state;
        end
      end
      CASECMPLTT_state: begin
        M_alumod_alufn = 6'h35;
        M_alumod_a = 16'h0002;
        M_alumod_b = 16'h0003;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h06;
        M_seg_values[5+4-:5] = 5'h04;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPLTF_state;
        end
      end
      CASECMPLTF_state: begin
        M_alumod_alufn = 6'h35;
        M_alumod_a = 16'h0006;
        M_alumod_b = 16'hfffb;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h06;
        M_seg_values[5+4-:5] = 5'h04;
        M_seg_values[0+4-:5] = 5'h16;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPLET1_state;
        end
      end
      CASECMPLET1_state: begin
        M_alumod_alufn = 6'h37;
        M_alumod_a = 16'hfffc;
        M_alumod_b = 16'h0007;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h04;
        M_seg_values[5+4-:5] = 5'h0e;
        M_seg_values[0+4-:5] = 5'h01;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPLEF_state;
        end
      end
      CASECMPLEF_state: begin
        M_alumod_alufn = 6'h37;
        M_alumod_a = 16'h0006;
        M_alumod_b = 16'h0003;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h04;
        M_seg_values[5+4-:5] = 5'h0e;
        M_seg_values[0+4-:5] = 5'h16;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASECMPLET2_state;
        end
      end
      CASECMPLET2_state: begin
        M_alumod_alufn = 6'h37;
        M_alumod_a = 16'h0005;
        M_alumod_b = 16'h0005;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h0c;
        M_seg_values[10+4-:5] = 5'h04;
        M_seg_values[5+4-:5] = 5'h0e;
        M_seg_values[0+4-:5] = 5'h1e;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = CASEMUL1_state;
        end
      end
      CASEMUL1_state: begin
        M_alumod_alufn = 6'h22;
        M_alumod_a = 16'h0003;
        M_alumod_b = 16'h0002;
        alu = M_alumod_alu;
        M_seg_values[15+4-:5] = 5'h10;
        M_seg_values[10+4-:5] = 5'h10;
        M_seg_values[5+4-:5] = 5'h03;
        M_seg_values[0+4-:5] = 5'h04;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[1+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_a_q <= 1'h0;
      M_store_b_q <= 1'h0;
      M_store_alufn_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_store_a_q <= M_store_a_d;
      M_store_b_q <= M_store_b_d;
      M_store_alufn_q <= M_store_alufn_d;
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
